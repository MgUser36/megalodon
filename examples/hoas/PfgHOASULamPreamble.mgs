Definition False : prop := forall p:prop, p.
Definition True : prop := forall p:prop, p -> p.
Definition not : prop -> prop := fun A:prop => A -> False.
(* Unicode ~ "00ac" *)
Prefix ~ 700 := not.

Definition and : prop -> prop -> prop := fun A B:prop => forall p:prop, (A -> B -> p) -> p.

(* Unicode /\ "2227" *)
Infix /\ 780 left := and.

Definition or : prop -> prop -> prop := fun A B:prop => forall p:prop, (A -> p) -> (B -> p) -> p.

(* Unicode \/ "2228" *)
Infix \/ 785 left := or.

Definition iff : prop -> prop -> prop := fun A B:prop => and (A -> B) (B -> A).

(* Unicode <-> "2194" *)
Infix <-> 805 := iff.

Section Eq.
Variable A:SType.
Definition eq : A->A->prop := fun x y:A => forall Q:A->A->prop, Q x y -> Q y x.
Definition neq : A->A->prop := fun x y:A => ~ eq x y.
End Eq.

Infix = 502 := eq.
(* Unicode <> "2260" *)
Infix <> 502 := neq.

Section FE.
Variable A B : SType.
Axiom func_ext : forall f g : A -> B , (forall x : A , f x = g x) -> f = g.
End FE.

Section Ex.
Variable A:SType.
Definition ex : (A->prop)->prop := fun Q:A->prop => forall P:prop, (forall x:A, Q x -> P) -> P.
End Ex.

(* Unicode exists "2203" *)
Binder+ exists , := ex.

Definition emp : set -> prop := fun x => False.

Definition adj : (set -> prop) -> set -> set -> prop := fun G x y => G y \/ y = x.

Axiom FalseE : False -> forall p:prop, p.
Axiom TrueI : True.
Axiom notI : forall A:prop, (A -> False) -> ~A.
Axiom notE : forall A:prop, ~A -> A -> False.
Axiom andI : forall (A B : prop), A -> B -> A /\ B.
Axiom andEL : forall (A B : prop), A /\ B -> A.
Axiom andER : forall (A B : prop), A /\ B -> B.
Axiom orIL : forall (A B : prop), A -> A \/ B.
Axiom orIR : forall (A B : prop), B -> A \/ B.
Axiom orE : forall (A B C:prop), (A -> C) -> (B -> C) -> A \/ B -> C.
Axiom iffEL : forall A B:prop, (A <-> B) -> A -> B.
Axiom iffER : forall A B:prop, (A <-> B) -> B -> A.
Axiom iffI : forall A B:prop, (A -> B) -> (B -> A) -> (A <-> B).
Axiom iff_ref : forall A:prop, A <-> A.
Axiom pred_ext_2 : forall P Q:set -> prop, P c= Q -> Q c= P -> P = Q.
Axiom pred_ext : forall P Q:set -> prop, (forall x, P x <-> Q x) -> P = Q.
Axiom adjI1 : forall G:set -> prop, forall x y, G y -> adj G x y.
Axiom adjI2 : forall G:set -> prop, forall x, adj G x x.
Axiom adjE : forall G:set -> prop, forall x y, adj G x y -> forall p:prop, (G y -> p) -> (y = x -> p) -> p.

(* Parameter pair "d58762d200971dcc7f1850726d9f2328403127deeba124fc3ba2d2d9f7c3cb8c" "d58762d200971dcc7f1850726d9f2328403127deeba124fc3ba2d2d9f7c3cb8c" *)
(* Parameter bind "73c9efe869770ab42f7cde0b33fe26bbc3e2bd157dad141c0c27d1e7348d60f5" "73c9efe869770ab42f7cde0b33fe26bbc3e2bd157dad141c0c27d1e7348d60f5" *)
Parameter pair : set -> set -> set.
Parameter bind : (set -> set) -> set.

Axiom pair_inj : forall x y z w, pair x y = pair z w -> forall p:prop, (x = z -> y = w -> p) -> p.
Axiom bind_inj : forall f g:set -> set, bind f = bind g -> f = g.
Axiom pair_not_bind : forall x y, forall f:set -> set, pair x y = bind f -> forall p:prop, p.
Axiom bind_not_pair : forall f:set -> set, forall x y, bind f = pair x y -> False.
Axiom prop_ext : forall p q:prop, (p -> q) -> (q -> p) -> p = q.

Definition nil : set := bind (fun x => x).

Axiom neq_nil_pair : forall y z, nil = pair y z -> forall p:prop, p.
Axiom neq_nil_bind_bind : forall f:set -> set -> set, nil = bind (fun x => bind (f x)) -> forall p:prop, p.
Axiom neq_nil_bind_pair : forall f:set -> set, forall g:set -> set, nil = bind (fun x => pair (f x) (g x)) -> forall p:prop, p.

Definition ap : set -> set -> set := fun x y => pair nil (pair x y).
Definition lam : (set -> set) -> set := fun f => pair nil (bind f).

Axiom ap_inj : forall x y z w, ap x y = ap z w -> forall p:prop, (x = z -> y = w -> p) -> p.
Axiom lam_inj : forall f g:set -> set, lam f = lam g -> f = g.
Axiom ap_not_lam : forall x y, forall f:set -> set, ap x y = lam f -> forall p:prop, p.

Definition ulamp : (set -> prop) -> set -> prop := fun G x =>
  forall p:(set -> prop) -> set -> prop,
       (forall G:set -> prop, forall y, G y -> p G y)
    -> (forall G:set -> prop, forall f:set -> set, (forall x, p (adj G x) (f x)) -> p G (lam f))
    -> (forall G:set -> prop, forall y z, p G y -> p G z -> p G (ap y z))
    -> p G x.

Axiom ulamp_var : forall G:set -> prop, forall x, G x -> ulamp G x.
Axiom ulamp_lam : forall G:set -> prop, forall f:set -> set, (forall x, ulamp (adj G x) (f x)) -> ulamp G (lam f).
Axiom ulamp_ap : forall G:set -> prop, forall x y, ulamp G x -> ulamp G y -> ulamp G (ap x y).

Definition beta1 : (set -> prop) -> set -> set -> prop := fun G x y =>
  forall r:(set -> prop) -> set -> set -> prop,
       (forall G:set -> prop, forall f:set -> set, forall z, (forall x, ulamp (adj G x) (f x)) -> ulamp G z -> r G (ap (lam f) z) (f z))
    -> (forall G:set -> prop, forall f g:set -> set, (forall z, r (adj G z) (f z) (g z)) -> r G (lam f) (lam g))
    -> (forall G:set -> prop, forall x y z, r G x z -> ulamp G y -> r G (ap x y) (ap z y))
    -> (forall G:set -> prop, forall x y z, r G y z -> ulamp G x -> r G (ap x y) (ap x z))
    -> r G x y.

Axiom beta1_beta : forall G:set -> prop, forall f:set -> set, forall x, (forall y, ulamp (adj G y) (f y)) -> ulamp G x -> beta1 G (ap (lam f) x) (f x).
Axiom beta1_lam : forall G:set -> prop, forall f g:set -> set, (forall z, beta1 (adj G z) (f z) (g z)) -> beta1 G (lam f) (lam g).
Axiom beta1_ap1 : forall G:set -> prop, forall x y z, beta1 G x z -> ulamp G y -> beta1 G (ap x y) (ap z y).
Axiom beta1_ap2 : forall G:set -> prop, forall x y z, beta1 G y z -> ulamp G x -> beta1 G (ap x y) (ap x z).

Definition transclos : (set -> set -> prop) -> set -> set -> prop :=
  fun q x y =>
   forall r:set -> set -> prop,
        (forall x y, q x y -> r x y)
     -> (forall x y z, r x y -> r y z -> r x z)
     -> r x y.

Axiom transclos_incl : forall q:set -> set -> prop, forall x y, q x y -> transclos q x y.
Definition betared : (set -> prop) -> set -> set -> prop := fun G => transclos (beta1 G).

Axiom betared_beta : forall G:set -> prop, forall f:set -> set, forall x, (forall y, ulamp (adj G y) (f y)) -> ulamp G x -> betared G (ap (lam f) x) (f x).

Definition eqclos : (set -> prop) -> (set -> set -> prop) -> set -> set -> prop :=
  fun dom q x y =>
   forall r:set -> set -> prop,
        (forall x y, q x y -> r x y)
     -> (forall x, dom x -> r x x)
     -> (forall x y, r x y -> r y x)
     -> (forall x y z, r x y -> r y z -> r x z)
     -> r x y.

Axiom eqclos_incl : forall dom:set -> prop, forall q:set -> set -> prop, forall x y, q x y -> eqclos dom q x y.
Axiom eqclos_ref : forall dom:set -> prop, forall q:set -> set -> prop, forall x, dom x -> eqclos dom q x x.
Axiom eqclos_sym : forall dom:set -> prop, forall q:set -> set -> prop, forall x y, eqclos dom q x y -> eqclos dom q y x.
Axiom eqclos_tra : forall dom:set -> prop, forall q:set -> set -> prop, forall x y z, eqclos dom q x y -> eqclos dom q y z -> eqclos dom q x z.

Definition betaeq : (set -> prop) -> set -> set -> prop := fun G => eqclos (ulamp G) (beta1 G).

Axiom betaeq_beta1 : forall G:set -> prop, forall x y, beta1 G x y -> betaeq G x y.
Axiom betaeq_beta : forall G:set -> prop, forall f:set -> set, forall x, (forall y, ulamp (adj G y) (f y)) -> ulamp G x -> betaeq G (ap (lam f) x) (f x).
Axiom betaeq_ref : forall G:set -> prop, forall x, ulamp G x -> betaeq G x x.
Axiom betaeq_sym : forall G:set -> prop, forall x y, betaeq G x y -> betaeq G y x.
Axiom betaeq_tra : forall G:set -> prop, forall x y z, betaeq G x y -> betaeq G y z -> betaeq G x z.
